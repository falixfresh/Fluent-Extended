name: Release

on:
  workflow_dispatch:
  release:
    types: [published, prereleased]

permissions:
  contents: write
  packages: write

jobs:
  publish-release:
    runs-on: ubuntu-latest

    steps:
    # Шаг 1: Клонируем репозиторий
    - name: GitHub Checkout
      uses: actions/checkout@v3

    # Шаг 2: Устанавливаем PNPM
    - name: Setup PNPM
      uses: pnpm/action-setup@v4
      with:
        version: 9
        run_install: true

    # Шаг 3: Устанавливаем Aftman
    - name: Setup Aftman
      uses: ok-nick/setup-aftman@v0.3.0

    # Шаг 4: Устанавливаем Rojo, Lune и DarkLua
    - name: Install Rojo, Lune and DarkLua
      run: aftman install

    # Шаг 5: Билдим проект с помощью Rojo
    - name: Build and Compile with Rojo
      run: |
        mkdir -p dist
        pnpm run rojo --verbose
        # Выводим содержимое папки для проверки
        ls dist/

    # Шаг 6: Компилируем проект в Lua с помощью Lune
    - name: Build Lua with Lune
      run: |
        lune build
        # Проверяем, что скомпилированные файлы есть
        ls dist/

    # Шаг 7: Создаем тег для релиза
    - name: Create GitHub Tag
      id: create_tag
      run: |
        # Извлекаем текущую версию из файла package.json (при наличии)
        VERSION=$(cat package.json | grep '"version"' | sed -E 's/.*"version": "(.*)".*/\1/')
        if [ -z "$VERSION" ]; then
          VERSION="v1.0.0" # Если версия не найдена, используем v1.0.0
        fi
        # Создаем тег с текущей версией
        git tag $VERSION
        git push origin $VERSION
        echo "Created tag $VERSION"
        echo "version=$VERSION" >> $GITHUB_ENV

    # Шаг 8: Загружаем артефакты релиза (main.rbxm и main.lua)
    - name: Upload Release Assets
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: |
          dist/main.rbxm
          dist/main.lua

    # Шаг 9: Публикуем артефакты в GitHub Release
    - name: Upload to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/main.rbxm
          dist/main.lua
        tag_name: ${{ env.version }} # Используем значение версии из предыдущего шага
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
